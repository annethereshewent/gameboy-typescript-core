class AudioProcessor extends AudioWorkletProcessor{constructor(t){super(t),this.audioData=t.processorOptions.audioData,this.writePointer=t.processorOptions.writePointer,this.readPointer=t.processorOptions.readPointer,this.interleaved=new Float32Array(128)}process(t,e,s){this.dequeue(this.interleaved);for(var r=0;r<128;r++)e[0][0][r]=this.interleaved[r];return!0}pop(t){const e=Atomics.load(this.readPointer,0),s=Atomics.load(this.writePointer,0),r=this.availableRead(e,s);if(r===0)return 0;const o=Math.min(r,t.length);let i=Math.min(this.audioData.length-e,o),a=o-i;this.copy(this.audioData,e,t,0,i),this.copy(this.audioData,0,t,i,a);const n=(e+o)%this.audioData.length;return Atomics.store(this.readPointer,0,n),o}isEmpty(){const t=Atomics.load(this.readPointer,0);return Atomics.load(this.writePointer,0)===t}dequeue(t){return this.isEmpty()?0:this.pop(t)}availableRead(t,e){return e>t?e-t:e+this.audioData.length-t}copy(t,e,s,r,o){for(let i=0;i<o;i++)s[r+i]=t[e+i]}}registerProcessor("audio-processor",AudioProcessor);
